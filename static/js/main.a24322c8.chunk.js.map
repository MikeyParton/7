{"version":3,"sources":["data.ts","components/Card/index.tsx","components/Sidebar/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["shows","title","thumbnail","CardImage","styled","img","OuterCard","button","Footer","div","FooterBackground","Logo","Title","h2","Card","show","onClick","src","alt","Container","open","Sidebar","onClose","data-testid","GlobalStyle","createGlobalStyle","Page","ShowList","GridItem","App","useState","selectedShowOpen","setSelectedShowOpen","selectedShow","setSelectedShow","handleClickCard","Boolean","className","map","key","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mNAEaA,EAAgB,CAC3B,CAAEC,MAAO,cAAeC,UAAW,sBACnC,CAAED,MAAO,OAAQC,UAAW,eAC5B,CAAED,MAAO,mBAAoBC,UAAW,2BACxC,CAAED,MAAO,mBAAoBC,UAAW,cACxC,CAAED,MAAO,gBAAiBC,UAAW,wBACrC,CAAED,MAAO,aAAcC,UAAW,qBAClC,CAAED,MAAO,aAAcC,UAAW,qBAClC,CAAED,MAAO,kBAAmBC,UAAW,0BACvC,CAAED,MAAO,eAAgBC,UAAW,uBACpC,CAAED,MAAO,cAAeC,UAAW,uB,g5CCRrC,IAAMC,EAAYC,IAAOC,IAAV,KAWTC,EAAYF,IAAOG,OAAV,IAiBTJ,GAMAK,EAASJ,IAAOK,IAAV,KAWNC,EAAmBN,IAAOK,IAAV,KAUhBE,EAAOP,IAAOC,IAAV,KAOJO,EAAQR,IAAOS,GAAV,KA0BIC,MAbf,YAA0C,IAA1BC,EAAyB,EAAzBA,KAAMC,EAAmB,EAAnBA,QACpB,OACE,kBAACV,EAAD,CAAWU,QAAS,kBAAMA,EAAQD,KAChC,kBAACZ,EAAD,CAAWc,IAAKF,EAAKb,UAAWgB,IAAKH,EAAKd,QAC1C,kBAACO,EAAD,KACE,kBAACE,EAAD,MACA,kBAACC,EAAD,CAAMM,IAAI,cAAcC,IAAI,eAC5B,kBAACN,EAAD,KAAQG,EAAKd,U,+YCjFrB,IAAMkB,EAAYf,IAAOK,IAAV,KAKW,qBAAGW,KAAmB,EAAI,WAiCrCC,MAZf,YAIW,IAHTD,EAGQ,EAHRA,KACAL,EAEQ,EAFRA,KACAO,EACQ,EADRA,QAEA,OACE,kBAACH,EAAD,CAAWI,cAAY,UAAUH,KAAMA,GACpCL,GAAQ,kBAAC,EAAD,CAAMA,KAAMA,EAAMC,QAASM,M,qzBC/B1C,IAAME,EAAcC,YAAH,KAcXC,EAAOtB,IAAOK,IAAV,KAOJkB,EAAWvB,IAAOK,IAAV,KAQRmB,EAAWxB,IAAOK,IAAV,KAmDCoB,MAlCf,WAAgB,IAAD,EACmCC,oBAAS,GAD5C,mBACNC,EADM,KACYC,EADZ,OAE2BF,mBAAsB,MAFjD,mBAENG,EAFM,KAEQC,EAFR,KAGPC,EAAkB,SAACpB,GACvBmB,EAAgBnB,GAChBiB,EAAoBI,QAAQrB,KAO9B,OACE,kBAACW,EAAD,CAAMW,UAAU,OACd,kBAACb,EAAD,MACA,kBAACG,EAAD,CAAUJ,cAAY,YACnBvB,EAAMsC,KAAI,SAACvB,GAAD,OACT,kBAACa,EAAD,CAAUW,IAAKxB,EAAKd,OAClB,kBAAC,EAAD,CACEe,QAASmB,EACTpB,KAAMA,SAKd,kBAAC,EAAD,CACEK,KAAMW,EACNhB,KAAMkB,EACNX,QApBoB,WACxBU,GAAoB,QClDJI,QACW,cAA7BI,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDsI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.a24322c8.chunk.js","sourcesContent":["import { Show } from './types';\n\nexport const shows: Show[] = [\n  { title: 'Gold Digger', thumbnail: './Gold Digger.jpeg'  },\n  { title: 'Liar', thumbnail: './Liar.jpeg'  },\n  { title: 'Little Women: LA', thumbnail: './Little Women- LA.jpeg' },\n  { title: 'My Kitchen Rules', thumbnail: './MKR.jpeg' },\n  { title: 'Pooch Perfect', thumbnail: './Pooch Perfect.jpeg' },\n  { title: 'Revolution', thumbnail: './Revolution.jpeg' },\n  { title: 'Smallville', thumbnail: './Smallville.jpeg' },\n  { title: 'The Good Doctor', thumbnail: './The Good Doctor.jpeg' },\n  { title: 'The Resident', thumbnail: './The Resident.jpeg' },\n  { title: 'Transformed', thumbnail: './Transformed.jpeg' },\n]","import React from 'react';\nimport styled from 'styled-components';\nimport { Show } from '../../types';\n\nconst CardImage = styled.img`\n  position: absolute;\n  top: 0;\n  left: 0;\n  bottom: 0;\n  right: 0;\n  width: 100%;\n  transform: scale(1.02); /* Avoids white spaces for images slightly off the aspect ratio */\n  transition: transform 0.4s ease;\n`;\n\nconst OuterCard = styled.button`\n  position: relative;\n  padding: 0;\n  padding-top: 56.25%; /* 16:9 Aspect Ratio */\n  width: 100%;\n  overflow: hidden;\n  cursor: pointer;\n  border: none;\n  display: flex;\n  flex-direction: column;\n  align-items: stretch;\n\n  &:focus {\n    outline: none;\n  }\n\n  &:hover, &:focus {\n    ${CardImage} {\n      transform: scale(1.05);\n    }\n  }\n`;\n\nconst Footer = styled.div`\n  position: absolute;\n  left: 0;\n  bottom: 0;\n  width: 100%;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  padding: 0 8px;\n`;\n\nconst FooterBackground = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  background-color: black;\n  opacity: 0.5;\n`;\n\nconst Logo = styled.img`\n  height: 20px;\n  width: 20px;\n  margin-right: 8px;\n  z-index: 100;\n`;\n\nconst Title = styled.h2`\n  font-family: arial;\n  font-weight: 600;\n  font-size: 16px;\n  color: white;\n  z-index: 100;\n`;\n\ninterface IProps {\n  show: Show,\n  onClick: (show: Show) => void\n}\n\nfunction Card({ show, onClick }: IProps) {\n  return (\n    <OuterCard onClick={() => onClick(show)}>\n      <CardImage src={show.thumbnail} alt={show.title} />\n      <Footer>\n        <FooterBackground />\n        <Logo src=\"./7Plus.png\" alt=\"Seven Plus\" />\n        <Title>{show.title}</Title>\n      </Footer>\n    </OuterCard>\n  )\n}\n\nexport default Card;\n","import React from 'react';\nimport styled from 'styled-components';\nimport Card from '../Card';\nimport { Show } from '../../types';\n\nconst Container = styled.div<{ open: boolean }>`\n  position: fixed;\n  top: 0;\n  bottom: 0;\n  left: 0;\n  transform: translateX(${({ open }) => (open ? 0 : '-100%')});\n  width: 100%;\n  padding: 20px;\n  background-color: white;\n  z-index: 200;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  transition: transform 0.4s ease;\n\n  @media (min-width: 768px) {\n    width: 50%;\n  }\n`;\n\ninterface IProps {\n  show: Show | null,\n  open: boolean,\n  onClose: () => void\n}\n\nfunction Sidebar({\n  open,\n  show ,\n  onClose}\n: IProps) {\n  return (\n    <Container data-testid=\"sidebar\" open={open}>\n      {show && <Card show={show} onClick={onClose} />}\n    </Container>\n  );\n}\n\nexport default Sidebar;\n","import React, { useState } from 'react';\nimport styled, { createGlobalStyle } from 'styled-components';\nimport { Show } from './types';\nimport { shows } from './data';\nimport Card from './components/Card';\nimport Sidebar from './components/Sidebar';\n\nconst GlobalStyle = createGlobalStyle`\n  html {\n    box-sizing: border-box;\n  }\n\n  body {\n    margin: 0;\n  }\n\n  *, *:before, *:after {\n    box-sizing: inherit;\n  }\n`;\n\nconst Page = styled.div`\n  height: 100vh;\n  width: 100vw;\n  overflow-y: scroll;\n  background-color: black;\n`;\n\nconst ShowList = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  width: 100%;\n  padding-left: 20px;\n  padding-top: 20px;\n`\n\nconst GridItem = styled.div`\n  width: 100%;\n  padding: 0 20px 20px 0;\n\n  @media (min-width: 768px) {\n    width: 50%;\n  }\n\n  @media (min-width: 1224px) {\n    width: 33.33%;\n  }\n\n  @media (min-width: 1824px) {\n    width: 16.66%;\n  }\n`;\n\nfunction App() {\n  const [selectedShowOpen, setSelectedShowOpen] = useState(false);\n  const [selectedShow, setSelectedShow] = useState<Show | null>(null);\n  const handleClickCard = (show: Show | null): void => {\n    setSelectedShow(show);\n    setSelectedShowOpen(Boolean(show));\n  };\n\n  const closeSelectedShow = () => {\n    setSelectedShowOpen(false);\n  }\n\n  return (\n    <Page className=\"App\">\n      <GlobalStyle />\n      <ShowList data-testid=\"showList\">\n        {shows.map((show) => (\n          <GridItem key={show.title}>\n            <Card\n              onClick={handleClickCard}\n              show={show}\n            />\n          </GridItem>\n        ))}\n      </ShowList>\n      <Sidebar\n        open={selectedShowOpen}\n        show={selectedShow}\n        onClose={closeSelectedShow}\n      />\n    </Page>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}